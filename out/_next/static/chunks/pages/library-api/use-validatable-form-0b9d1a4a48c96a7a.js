(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1323],{23508:function(e,a,r){"use strict";var l=r(95318);a.Z=void 0;var t=l(r(64938)),n=r(85893),s=(0,t.default)((0,n.jsx)("path",{d:"M16.59 8.59 12 13.17 7.41 8.59 6 10l6 6 6-6z"}),"ExpandMore");a.Z=s},23831:function(e,a,r){(window.__NEXT_P=window.__NEXT_P||[]).push(["/library-api/use-validatable-form",function(){return r(95906)}])},2633:function(e,a,r){"use strict";var l=r(85893);a.Z=function(e){var a=e.apiInfoList.map((function(e,a){var r=e.label,t=e.desc,n=e.indent||0,s={paddingLeft:20*n+10+"px"};return n&&(s.borderTop="1px dashed black"),(0,l.jsxs)("div",{style:s,className:"apiInfo",children:[(0,l.jsx)("div",{className:"apiLabel",children:r}),(0,l.jsx)("div",{className:"apiDesc",children:t})]},a)}));return(0,l.jsx)("div",{className:"apiInfoWrapper",children:a})}},8369:function(e,a,r){"use strict";var l=r(85893),t=r(82280),n=r(38895),s=r(22797),i=r(23508);a.Z=function(e){var a=e.code;return(0,l.jsx)("div",{className:"codeExampleDiv",children:(0,l.jsxs)(t.Z,{children:[(0,l.jsx)(n.Z,{expandIcon:(0,l.jsx)(i.Z,{}),"aria-controls":"panel1a-content",id:"panel1a-header",children:(0,l.jsx)("span",{className:"codeExampleLabel",children:"Example Source Code"})}),(0,l.jsx)(s.Z,{children:(0,l.jsx)("span",{className:"codeExample",children:a})})]})})}},95906:function(e,a,r){"use strict";r.r(a);var l=r(85893),t=r(2633),n=r(8369),s=r(2386),i=r(41664),o=[{label:(0,l.jsxs)("div",{children:["rules (array)"," ",(0,l.jsx)(i.default,{className:"inner-link",href:"/library-api/rules",children:"See rules API"})]}),desc:"Array of validation rules to be run on current form."},{label:"initialFormData (object)",desc:"Initial form data to set default values of current form."},{label:(0,l.jsxs)("div",{children:["hideBeforeSubmit (boolean)"," ",(0,l.jsx)(i.default,{className:"inner-link",href:"/advanced/hide-before-submit",children:"See Example"})]}),desc:"Flag to hide validation errors before setFormIsSubmitted function is called."},{label:(0,l.jsxs)("div",{children:["showAfterBlur (boolean)"," ",(0,l.jsx)(i.default,{className:"inner-link",href:"/advanced/show-after-blur",children:"See Example"})]}),desc:"Flag to hide validation errors before setPathIsBlurred function is called for any path."},{label:(0,l.jsxs)("div",{children:["focusToErrorAfterSubmit (boolean)"," ",(0,l.jsx)(i.default,{className:"inner-link",href:"/advanced/focus-to-error-after-submit",children:"See Example"})]}),desc:"Flag to automatically focus to first HTML element with validation error after setFormIsSubmitted function is called."},{label:(0,l.jsxs)("div",{children:["elementFocusHandler (function)"," ",(0,l.jsx)(i.default,{className:"inner-link",href:"/customizations/custom-element-focus-handler",children:"See Example"})]}),desc:'Function that accepts the first "elementId" of current validation errors as parameter that is used to customly manage DOM after submit.'}],d=[{label:"isValid (boolean)",desc:"Always returns the form's combined validation result according to current formData and rules."},{label:(0,l.jsxs)("div",{children:["validationError (object)"," ",(0,l.jsx)(i.default,{className:"inner-link",href:"/examples/validation-error",children:"See Example"})]}),desc:"Returns the validation result info of each rule with each path according to current formData and rules. Some validation results can be hide before submit or before blur."},{label:(0,l.jsxs)("div",{children:["validationErrorOriginalResult (object)"," ",(0,l.jsx)(i.default,{className:"inner-link",href:"/examples/validation-error-original-result",children:"See Example"})]}),desc:"Returns the validation result info of each rule with each path according to current formData and rules. (is not hidden before submit or before blur)."},{label:(0,l.jsxs)("div",{children:["formData (object)"," ",(0,l.jsx)(i.default,{className:"inner-link",href:"/examples/form-data",children:"See Example"})]}),desc:"Returns current formData."},{label:(0,l.jsxs)("div",{children:["setPathValue(path, value)"," ",(0,l.jsx)(i.default,{className:"inner-link",href:"/library-api/path",children:"See Path API"})," - ",(0,l.jsx)(i.default,{className:"inner-link",href:"/examples/set-path-value",children:"See Example"})]}),desc:"Function to update given path of formData with given value."},{label:(0,l.jsxs)("div",{children:["unsetPathValue(path, value)"," ",(0,l.jsx)(i.default,{className:"inner-link",href:"/library-api/path",children:"See Path API"})," - ",(0,l.jsx)(i.default,{className:"inner-link",href:"/examples/unset-path-value",children:"See Example"})]}),desc:"Function to remove value and key for given path of formData."},{label:(0,l.jsxs)("div",{children:["setFormIsSubmitted()"," ",(0,l.jsx)(i.default,{className:"inner-link",href:"/advanced/hide-before-submit",children:"See Example"})]}),desc:"Function to set form is submitted info true and show all current validation results if hideBeforeSubmit parameter is set true."},{label:(0,l.jsxs)("div",{children:["setPathIsBlurred(path)"," ",(0,l.jsx)(i.default,{className:"inner-link",href:"/library-api/path",children:"See Path API"})]}),desc:"Function to set element of path is blurred info true and unhide its current validation result if showAfterBlur parameter is set true."},{label:(0,l.jsxs)("div",{children:["unsetPathIsBlurred(path)"," ",(0,l.jsx)(i.default,{className:"inner-link",href:"/library-api/path",children:"See Path API"})," - ",(0,l.jsx)(i.default,{className:"inner-link",href:"/examples/unset-path-is-blurred",children:"See Example"})]}),desc:"Function to unset element of path is blurred info and hide its current validation result if showAfterBlur parameter is set true."},{label:(0,l.jsxs)("div",{children:["setFormData(newFormData, pathToBeRun)"," ",(0,l.jsx)(i.default,{className:"inner-link",href:"/examples/set-form-data",children:"See Example"})]}),desc:"Function to update whole formData and run validation rules of given pathToBeRun array."},{label:(0,l.jsxs)("div",{children:["setRules(newRules)"," ",(0,l.jsx)(i.default,{className:"inner-link",href:"/examples/set-rules",children:"See Example"})]}),desc:"Function to update rules and run all validations according to these rules."},{label:(0,l.jsxs)("div",{children:["setFormDataAndRules(newFormData, newRules)"," ",(0,l.jsx)(i.default,{className:"inner-link",href:"/examples/set-form-data-and-rules",children:"See Example"})]}),desc:"Function to update whole formData and rules simultaneously and run all validations according to these formData and rules."},{label:(0,l.jsxs)("div",{children:["resetForm()"," ",(0,l.jsx)(i.default,{className:"inner-link",href:"/advanced/show-after-blur",children:"See Example"})]}),desc:"Function to reset form submitted info and elements blurred info."},{label:"getValue(path)",desc:"Function to get value of given path on formData object."},{label:"getError(path)",desc:"Function to get validation error of given path on validationError object."},{label:"forceRunAllValidations()",desc:"Function to run all validations according to current rules."}];a.default=function(){return(0,l.jsxs)(s.Z,{header:"useValidatableForm",children:[(0,l.jsx)(n.Z,{code:"const {isValid, validationError, validationErrorOriginalResult, formData, setPathValue, \n    unsetPathValue, setFormIsSubmitted, setPathIsBlurred, unsetPathIsBlurred, setFormData, \n    setRules, setFormDataAndRules, resetForm, getValue, getError, forceRunAllValidations } = \n    useValidatableForm({\n        rules,\n        initialFormData,\n        hideBeforeSubmit,\n        showAfterBlur,\n        focusToErrorAfterSubmit,\n});"}),(0,l.jsx)("div",{className:"apiInfoSectionHeader",children:"Hook Parameters"}),(0,l.jsx)(t.Z,{apiInfoList:o}),(0,l.jsx)("div",{className:"apiInfoSectionHeader",children:"Return Values"}),(0,l.jsx)(t.Z,{apiInfoList:d})]})}}},function(e){e.O(0,[9774,2888,179],(function(){return a=23831,e(e.s=a);var a}));var a=e.O();_N_E=a}]);